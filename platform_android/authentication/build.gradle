apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
    useBuildCache = true
}

apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}

android {
    compileSdkVersion Versions.compileSdk

    defaultConfig {
        minSdkVersion Versions.minSdk
        targetSdkVersion Versions.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        buildConfigField 'String', 'FIREBASE_API_KEY',
                "\"" + getKey('FIREBASE_API_KEY') + "\""
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation project(":platform_android:core")
    implementation project(":platform_android:authentication-ui")
    implementation project(':shared:SharedCommon')
    implementation project(':shared:SharedAuthentication')
    implementation project(':platform_android:common-ui')
    implementation Deps.kotlin
    implementation Deps.kotlin_reflect

    implementation Deps.material
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.fragment:fragment:1.2.2'
    implementation 'androidx.fragment:fragment-ktx:1.2.2'
    implementation 'androidx.appcompat:appcompat:1.1.0'

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"
    implementation "androidx.lifecycle:lifecycle-common:2.2.0"
    implementation AndroidDeps.dagger
    kapt AndroidDeps.dagger_compiler
    testImplementation 'junit:junit:4.12'

    def fragment_version = "1.2.2"
    androidTestImplementation "androidx.fragment:fragment-testing:$fragment_version"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def getKey(String key) {
    def Properties props = new Properties()
    props.load(new FileInputStream(file('../../local.properties')))
    return props[key]
}
